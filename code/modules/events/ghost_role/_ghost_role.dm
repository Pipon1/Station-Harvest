#define MAX_SPAWN_ATTEMPT 3


/datum/round_event/ghost_role
	fakeable = FALSE
	/// Members of this list will be placed at the front of the candicacy list, in front of the (shuffled) normal candidates.
	var/list/priority_candidates = list() //expected to contain 0 or more /clients (or things with .key)
	/// The minimum number of signups required for the event to continue past the polling period
	var/minimum_required = 1
	/// The name of the role, to be displayed in logs/polls/etc.
	var/role_name = "debug rat with cancer" // Q U A L I T Y  M E M E S
	/// A list of mobs generated by this event.
	var/list/spawned_mobs = list()
	/// Used to communicate the progress of the event firing, and whether or not the event was successfuly run.
	var/status
	/// A stored value of the event's announcement chance. Cached and not immediately used to prevent announcements for a failed event roll.
	var/cached_announcement_chance

/datum/round_event/ghost_role/start()
	try_spawning()

/**
 * Attempts to spawn the role, and cancels the event if it fails.
 *
 * Pauses the event right as it begins, and waits for setup/polling to end.
 * If successful, continues running the rest of the event and notifies ghosts.
 */

/datum/round_event/ghost_role/proc/try_spawning()
	// The event does not run until the spawning has been attempted
	// to prevent us from getting gc'd halfway through
	processing = FALSE

	status = spawn_role()
	if(isnull(cached_announcement_chance))
		cached_announcement_chance = announce_chance //only announce once we've finished the spawning loop.
	announce_chance = (status == SUCCESSFUL_SPAWN ? cached_announcement_chance : 0)
	if((status == WAITING_FOR_SOMETHING))
		var/retry_count = 0
		if(retry_count >= MAX_SPAWN_ATTEMPT)
			message_admins("L'événement [role_name] a dépassé le nombre maximum d'essaie de spawn. Annulation et re-création..")
			if(control && control.occurrences > 0) //Don't refund if it hasn't
				control.occurrences--
			return
		var/waittime = 300 * (2**retry_count)
		message_admins("L'événement ne créera pas de [role_name] jusqu'à ce que \
			les conditions soient présentes. Attente de [waittime/10] secondes puis nouvel essaie.")
		addtimer(CALLBACK(src, PROC_REF(try_spawning), 0, ++retry_count), waittime)
		return

	if(!status)
		message_admins("Un essaie pour spawn [role_name] a renvoyé [status], c'est un bug.")
		kill()
		return

	switch(status)
		if(MAP_ERROR)
			message_admins("[role_name] ne peut pas être créé à cause d'une erreur de la map.")
			kill()
			return
		if(NOT_ENOUGH_PLAYERS)
			message_admins("[role_name] ne peut pas être créé à cause d'un manque de joueur.")
			deadchat_broadcast(" n'a pas eu assez de candidats ([minimum_required])", "<b>[role_name]</b>", message_type=DEADCHAT_ANNOUNCEMENT)
			kill()
			return
		if(SUCCESSFUL_SPAWN)
			message_admins("[role_name] spawned successfully.")
			if(spawned_mobs.len)
				for (var/mob/mobs as anything in spawned_mobs)
					announce_to_ghosts(mobs)
			else
				message_admins("Pas de mobs trouvé dans la liste `spawned_mobs`, c'est un bug.")

	processing = TRUE

/**
 * Performs the spawning of our role. Entirely specific to the event itself.
 *
 * Should return SUCCESSFUL_SPAWN if role was successfully spawned,
 * return NOT_ENOUGH_PLAYERS if less than mimimum_required was found,
 * and return MAP_ERROR if a spawn location could not be found.
 */

/datum/round_event/ghost_role/proc/spawn_role()
	return FALSE

/**
 * Gathers the candidates to select our ghost roles from.
 *
 * Returns a list of candidates in priority order, with candidates from
 * `priority_candidates` first, and ghost roles randomly shuffled and
 * appended after.
 *
 * jobban - The jobban flag to exclude players from the polling pool with.
 * be_special - The "special role" flag for the ghost candidacy poll.
 */

/datum/round_event/ghost_role/proc/get_candidates(jobban, be_special)
	var/list/mob/dead/observer/regular_candidates
	// don't get their hopes up
	if(priority_candidates.len < minimum_required)
		regular_candidates = poll_ghost_candidates("Est-ce que vous voudriez être envisagé pour le rôle de '[role_name]'?", jobban, be_special)
	else
		regular_candidates = list()

	shuffle_inplace(regular_candidates)

	var/list/candidates = priority_candidates + regular_candidates

	return candidates

#undef MAX_SPAWN_ATTEMPT
